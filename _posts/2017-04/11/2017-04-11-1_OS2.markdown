---

layout: post
title: "(OS) OS 시험공부 2장[2/6]"
category: OS

---

# Chap2
> chap2 또한 대략적인 틀만 나오게 된다.

## OS가 제공하는 서비스
* User의 관점에서
    1. User Interface  
        * CLI : shell을 통해 수행
        * Batch Interface : 커맨드를 모아서 여러개를 한번에 수행
        * GUI
    2. Program execute
    3. I/O operations
* 응용프로그래머 관점에서
    1. File-System manipulation
        * read, write, create, delete..등 file system call 관리
    2. Communications
        * shared Memory
        * message passing
    3. Error Detection
* OS를 개발하는 관점에서
    1. Resource allocation
    2. Accounting
    3. Protection
    4. Security

## CLI(Command Line Interface)
* shell에서 명령어를 실행하는 두가지 방법
    1. 실제 shell 자체가 가지고 있는 명령어를 수행
    2. 라이브러리(API)를 통해 수행. 별도 디렉토리로 이동해서 실행파일 수행된다.

## System Call
> Application program에서 OS로 서비스를 요청하고 싶을 때 쓰는 메카니즘. Trap의 일종이다.

* 호출방식 : 주로 API(Library)를 통해 간접적으로 수행한다.
    * POSIX나 WIN32같은 Interface를 통해 수행된다.
    * 장점
        * Portability : 여러 System 에서 수행 될 수 있다.
        * Ease of programming : system call 내부가 어떻게 작동하는지 알 필요가 없다.
* **System Call Interface**
<img src = '/post_img/201704/11/1.png'/><br/>
    * table 형태의 모양을 갖게 된다. 해당 table은 숫자와 함수가 매칭되어 있다
    * 진행되는 과정을 살펴보면
    <img src = '/post_img/201704/11/2.png' width="600"/><br/>
        1. open()이란 명령어가 온다고 예시를 해보면
        2. System call Interface를 참조해서 번호를 넘겨준다.
        3. 주소를 참조해서 실제 system call을 수행하게 된다.
* System call에서 parameter를 넘겨줄 때
    1. register에 parameter를 저장해 넘겨준다. 하지만 용량의 한계가 있다.
    2. 메모리 혹은 table, block에 저장하여 그 주소를 레지스터에 저장해 넘겨준다.
    > 실제로 parameter가 6개 까진 1번 방식 사용, 그 이상일 때는 2번 방식 사용

## System program
> System program은 program 개발과 실행에 편리한 환경을 제공한다. System Call 같은 것을 쉽게 사용할 수 있게! 대부분의 사람들은 실제적 System call을 보기 힘들다.

## OS Design 과 Implementation
* User goals : convenient to use, easy to learn, reliability, safe
* System goals : easy design, Implementation, maintain, reliable, flexible
* 정책 변화에 민감하지 않는 메카니즘이 바람직 할 수 있다. 극단적인 예로 `Micro-kernel`이 있다.

## OS structure
### Simple structure
> Dual-mode를 제공하지 않는 형태이다. 과거 MS-DOS가 그 예이다. 응용프로그램에서 I/O devices에 접근이 가능해진다

### Layered approach
> 상위 계층에서 하위 계층으로 접근할 때는 하위 계층에서 제공하는 operation(System call 처럼)을 통해 접근한다.

* Bottom layer는 0, user Interface는
* contruction과 debugging이 단순해진다. 커널 부분은 고려하지 않고 내가 작성한 프로그램만 신경쓰면 되니까!

### Micro-kernel
> OS의 기능중 핵심이 되는 기능(scheduling, virtual memory...)등을 제외하고는 모두 user-level에서 해결하게 된다.

* 장점
    * Policy가 바뀌게 되면 추가 / 제거가 쉽다. 확장성이 좋다. Porting이 좋다.
    * 간단한 체계에서 주로 사용한다.(insensitive)
    * kernel의 코드가 상대적으로 줄어 안정적이게 된다.
        * real-time operation systems(자동차나 무기, 비행기 등..)에 적합하다.
* 단점
    * user-level의 process가 증가하게 되고 Communication이 증가하게 된다. 고로 overhead가 상당해진다.

### Module
> Core component를 각각 독립적으로 수행가능하게 seperate하여 사용하는 것을 의미한다.

* 각종 모듈들이 동적으로 추가 / 제거가 가능해진다. 만약 실행중에 Device가 추가 되었을 경우 프로그램 실행중에 추가가 가능해진다. 만약 지원을 하지 않는다면 갑자기 수행하던 일이 멈추고 Device가 추가되는 일을 수행할 수 있다.
* Linux에서는 Module의 동적인 추가 제거가 가능한데 `$ insmod driver.o`를 하게 되면 driver란 모듈이 동적으로 추가된다.`$ rmmod driver`를 하게 되면 모듈을 커널에서 제거하게 된다.
* **Linux는 Layered approach + Module 형태이다.**

### Virtual machine
> 서로 다른 OS를 하나의 기기에서 동시에 실행 시킬 수 있게 된다. 각각 virtual kernel과 virtual user space를 갖게 된다.

* 장점 : 서로 다른 OS에서 동시에 테스트가 가능해 진다.
* 단점 : 구현이 어렵다.

## System boot
### SYSGEN(System generation)
* OS는 어느 형태의 기계이든지 간에 실행이 되도록 설계가 되어있습니다. OS를 제대로 설치하려면 H/W 에 대한 Information을 얻어와야 하는데 SYSGEN Program을 이용하게 됩니다.
    * CPU는 뭐쓰나. 메모리는 얼마나 되는가. 어떤 devices가 사용가능한가 등등..

### Booting
> Booting은 컴퓨터를 실행했을 때 Kernel을 로드 하는 과정을 의미한다

* **Bootstrap loader**
> kernel에 위치한 아주 적은 양의 코드를 의미한다. CPU 레지스터에서부터 각각의 장치에 이르는 시스템의 모든 구성요소를 초기화 해준 후, 운영체제를 실행시켜주는 역할을 합니다. 이를 위해서 부트스트랩 프로그램은 디스크에서 운영체제 커널을 찾아서 메모리에 적재하고, 진입점으로 메모리를 이동(jump)시킴으로서 운영체제가 동작하도록 도와줍니다.

* 두가지 형태의 부팅
    * Single-step approach
    <img src = '/post_img/201704/11/3.png' width="500"/><br/>
        * H/W를 초기화 하는데 오래 걸릴수도 있고 로드도 오래 걸릴수도 있다.
    * Two-step approach
    <img src = '/post_img/201704/11/4.png' width="500"/><br/>
        * Boot block에 실질적인 부트스트랩 로더 역할을 하는 것을 넣어 Disk에서 내용을 불러 사용하게 한다.(이 부분이 주로 우리가 아는 부트파티션)


* 참조링크
    * [부트스트랩 로더 참조 사이트](http://frontjang.info/entry/%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9-%EB%B6%80%ED%8A%B8-%EB%B8%94%EB%A1%9D-MBR-%EA%B0%84%EB%9E%B5-%EC%84%A4%EB%AA%85)




<br/><br/>
