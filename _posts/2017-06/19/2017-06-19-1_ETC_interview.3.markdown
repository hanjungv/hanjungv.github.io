---

layout: post
title: "(ETC) 면접준비[2/2]"
category: ETC

---


## 1의보수, 2의보수
* 1의 보수는 비트의 0인 부분을 1로 1인 부분을 0으로 바꿔주면 탄생
* 2의 보수는 1의 보수에서 1을 더해주면 탄생
* 컴퓨터는 음수를 표현하기 위해 2의보수를 사용, 동일한 양수. 음수를 더했을 때 0이 나와야하기 때문에
  * 1의 보수일 경우 +0은 8비트로 00000000 인데 -0은 11111111 이다. 둘을 더했을 경우 11111111이 되어 0이 되지 않는다.

## shift 연산
* 데이터 << 이동할 비트 수 -> 이동시킬수록 값이 2배씩 증가
  * 5 << 3 = 5*(2^3) = 40
* 데이터 >> 이동할 비트 수 -> 이동시킬수록 값이 2배씩 감소
  * 8 >> 3 = 8/(2^3) = 1
* 언더플로우, 오버플로우가 났을 경우에는 어떻게 할까요?
  * 시프트 연산자로 수행된 변환은 오버플로 또는 언더플로 조건을 지원하지 않으므로 변환 후 시프트 연산의 결과가 첫 번째 피연산자의 형식으로 표현될 수 없는 경우 정보가 손실될 수 있습니다.

## CDN이란?
오늘 면접에서 뜻하지 않게 CDN이란 단어를 꺼내게 되어 난감하였는데 이 기회에 CDN을 공부하려 한다. 우선 내가 아는 CDN은 단순하게 jQuery같은 프레임워크, 라이브러리를 링크를 통해 사용할 때 사용했던 사이트에서 쉽게 볼 수 있었던 이름이었다.

* CDN을 왜 쓸까?
CDN이란 Content Delivery Network의 약자로써 온라인 상의 대용량 컨텐츠를 저렴한 비용으로 빠르게 전송하는 기술을 말한다.
주요 IDC, ISP의 CDN서버에 컨텐츠를 분상시키고 최종 사용자의 네트워크 경로상 가장 가까운 곳의 서버에서 컨텐츠를 전송받도록 하여서 트래픽이 특정 서버에 몰려서 과부하가 발생하는 것을 막는다. 사용자 입장에서는 자신과 가장 가까운 서버에서 컨텐츠를 전송 받음으로 인해 서비스의 질(속도) 향상을 가져온다.
(출처 : http://blog.naver.com/PostView.nhn?blogId=skyupup&logNo=220649195335)

* 미디어 회사나 전자상거래 업체와 같은 콘텐츠 제공자는 그들의 컨텐츠를 사용자들에게 전달하기 위해서 CDN 회사에 사용료를 지불한다. 반대로, CDN은 ISP, 이동통신사업자, 그리고 네트워크 사업자들에게 데이터 센터에서의 서버 호스팅 비용을 지불한다. 더 나은 퍼포먼스와 사용성 이외에도 CDN은 컨텐츠 제공자의 서버의 트래픽을 덜어주어 컨텐츠 제공자의 비용을 줄여준다. 추가로, CDN은 대규모 분산 서버 장비로 공격 트래픽을 완화할 수 있으므로 컨텐츠 제공자에게 DoS 공격에 대해서 어느정도 보호해 줄 수 있다. 초기 대부분의 CDN은 CDN이 소유하고 동작하는 서버를 사용하는 컨텐츠만 서비스하였으나 최신 트랜드는 P2P기술을 이용하는 하이브리드 모델을 사용하는 것이다. 하이브리드 모델에서 컨텐츠는 지정된 서버 그리고 주변 컴퓨터(peer-user-owned)를 모두 사용한다.
(출처 : https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC)


## 프론트엔드 최적화를 하기위해 어떤 노력을 해야하는가?
* 웹페이지 로드시간을 줄여보자
  1. 파일을 캐싱하여 사용. 브라우저 캐싱의 만료날짜를 정하여 관리한다. 
  2. CDN을 이용하자! 라이브러리 프레임워크 같은것을 사용하는 것도 있지만 이미지를 이용하는 것도 좋은 방법이다.
  3. 사용하지 않는 파일들은 지우자
  4. minify CSS, minify JavaScript, 하나로 합치기
    * 자바스크립트 파일들은 body Tag를 닫기 직전에 로드 되는 것이 가장 좋습니다. 그렇게 함으로서 스크립트가 컨텐츠의 로딩을 막지 못하게 하고 스크립트가 모두 다운되고 실행되기 전에 페이지 내용을 볼 수 있도록 보장합니다.
    * 요즘 브라우저는 최대 4개 정도의 동시 다운로드를 지원한다고 함 
  5. 이미지 포맷을 JPG, PNG 적절하게 선택하여 사용하고 영역에 맞춘 이미지를 사용하는 것이 좋다.
  6. 위의 말을 확장한 것이지만 큰 이미지를 여러군데에서 사용하는 것은 메모리낭비가 있을수있다.
  7. 웹 폰트 같은 경우에도 안쓰면 지우자
  8. 한 번에 페이지를 모두 보여 주기보다는 점진적으로 보여 주는 방법을 적용한다.

* 추가하자


## 대규모 서비스의 로드를 분산하려면?
* [http://d2.naver.com/helloworld/206816](http://d2.naver.com/helloworld/206816), 읽어보기
* 로드 밸런서 : 리퀘스트를 여러 노드에 분산해 주는 역할을 한다. 적절히 분산하여 사용
* 오토 스캐일링
* Redundancy : 서버에 장애가 생길 것을 대비. 여러곳에 데이터를 저장해놓는다.
* 캐시
* 큐


## url이 브라우저에서 입력 되었을 때 페이지가 불러오기까지의 과정
* [http://d2.naver.com/helloworld/59361](http://d2.naver.com/helloworld/59361), 읽어보기
1. url이 브라우저에 입력이 된다.
2. DNS가 DNS네임서버에서 ip로 변환
3. 그 주소에 맞는 내용을 서버에서 다운(레일즈 같은 경우 라우터를 통해서 해당 내용을 불러옴)
4. 다운받은 스크립트, css, html을 렌더링. 돔객체를 만들고 트리형태로 해서 등등..
5. response가 오고 끝!


<br/><br/>